/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Manages external data source connections and credentials.
 * @class
 * @memberof v1
 */
export declare class ConnectionServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    connectionServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of ConnectionServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ConnectionServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Creates a new connection.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     *   Must be in the format `projects/{project_id}/locations/{location_id}`
     * @param {string} [request.connectionId]
     *   Optional. Connection id that should be assigned to the created connection.
     * @param {google.cloud.bigquery.connection.v1.Connection} request.connection
     *   Required. Connection to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.connection.v1.Connection|Connection}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/connection_service.create_connection.js</caption>
     * region_tag:bigqueryconnection_v1_generated_ConnectionService_CreateConnection_async
     */
    createConnection(request?: protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest, options?: CallOptions): Promise<[
        protos.google.cloud.bigquery.connection.v1.IConnection,
        (protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest | undefined),
        {} | undefined
    ]>;
    createConnection(request: protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest, options: CallOptions, callback: Callback<protos.google.cloud.bigquery.connection.v1.IConnection, protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest | null | undefined, {} | null | undefined>): void;
    createConnection(request: protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest, callback: Callback<protos.google.cloud.bigquery.connection.v1.IConnection, protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns specified connection.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the requested connection, for example:
     *   `projects/{project_id}/locations/{location_id}/connections/{connection_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.connection.v1.Connection|Connection}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/connection_service.get_connection.js</caption>
     * region_tag:bigqueryconnection_v1_generated_ConnectionService_GetConnection_async
     */
    getConnection(request?: protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest, options?: CallOptions): Promise<[
        protos.google.cloud.bigquery.connection.v1.IConnection,
        (protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest | undefined),
        {} | undefined
    ]>;
    getConnection(request: protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest, options: CallOptions, callback: Callback<protos.google.cloud.bigquery.connection.v1.IConnection, protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest | null | undefined, {} | null | undefined>): void;
    getConnection(request: protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest, callback: Callback<protos.google.cloud.bigquery.connection.v1.IConnection, protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates the specified connection. For security reasons, also resets
     * credential if connection properties are in the update field mask.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the connection to update, for example:
     *   `projects/{project_id}/locations/{location_id}/connections/{connection_id}`
     * @param {google.cloud.bigquery.connection.v1.Connection} request.connection
     *   Required. Connection containing the updated fields.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Update mask for the connection fields to be updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.connection.v1.Connection|Connection}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/connection_service.update_connection.js</caption>
     * region_tag:bigqueryconnection_v1_generated_ConnectionService_UpdateConnection_async
     */
    updateConnection(request?: protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest, options?: CallOptions): Promise<[
        protos.google.cloud.bigquery.connection.v1.IConnection,
        (protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest | undefined),
        {} | undefined
    ]>;
    updateConnection(request: protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest, options: CallOptions, callback: Callback<protos.google.cloud.bigquery.connection.v1.IConnection, protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest | null | undefined, {} | null | undefined>): void;
    updateConnection(request: protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest, callback: Callback<protos.google.cloud.bigquery.connection.v1.IConnection, protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes connection and associated credential.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the deleted connection, for example:
     *   `projects/{project_id}/locations/{location_id}/connections/{connection_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/connection_service.delete_connection.js</caption>
     * region_tag:bigqueryconnection_v1_generated_ConnectionService_DeleteConnection_async
     */
    deleteConnection(request?: protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        (protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest | undefined),
        {} | undefined
    ]>;
    deleteConnection(request: protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest | null | undefined, {} | null | undefined>): void;
    deleteConnection(request: protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the access control policy for a resource.
     * Returns an empty policy if the resource exists and does not have a policy
     * set.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {google.iam.v1.GetPolicyOptions} request.options
     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
     *   `GetIamPolicy`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.iam.v1.Policy|Policy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/connection_service.get_iam_policy.js</caption>
     * region_tag:bigqueryconnection_v1_generated_ConnectionService_GetIamPolicy_async
     */
    getIamPolicy(request?: protos.google.iam.v1.IGetIamPolicyRequest, options?: CallOptions): Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest | undefined,
        {} | undefined
    ]>;
    getIamPolicy(request: protos.google.iam.v1.IGetIamPolicyRequest, options: CallOptions, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.IGetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    getIamPolicy(request: protos.google.iam.v1.IGetIamPolicyRequest, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.IGetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Sets the access control policy on the specified resource. Replaces any
     * existing policy.
     *
     * Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being specified.
     *   See the operation documentation for the appropriate value for this field.
     * @param {google.iam.v1.Policy} request.policy
     *   REQUIRED: The complete policy to be applied to the `resource`. The size of
     *   the policy is limited to a few 10s of KB. An empty policy is a
     *   valid policy but certain Cloud Platform services (such as Projects)
     *   might reject them.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
     *   the fields in the mask will be modified. If no mask is provided, the
     *   following default mask is used:
     *
     *   `paths: "bindings, etag"`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.iam.v1.Policy|Policy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/connection_service.set_iam_policy.js</caption>
     * region_tag:bigqueryconnection_v1_generated_ConnectionService_SetIamPolicy_async
     */
    setIamPolicy(request?: protos.google.iam.v1.ISetIamPolicyRequest, options?: CallOptions): Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest | undefined,
        {} | undefined
    ]>;
    setIamPolicy(request: protos.google.iam.v1.ISetIamPolicyRequest, options: CallOptions, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.ISetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    setIamPolicy(request: protos.google.iam.v1.ISetIamPolicyRequest, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.ISetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns permissions that a caller has on the specified resource.
     * If the resource does not exist, this will return an empty set of
     * permissions, not a `NOT_FOUND` error.
     *
     * Note: This operation is designed to be used for building permission-aware
     * UIs and command-line tools, not for authorization checking. This operation
     * may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see
     *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.iam.v1.TestIamPermissionsResponse|TestIamPermissionsResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/connection_service.test_iam_permissions.js</caption>
     * region_tag:bigqueryconnection_v1_generated_ConnectionService_TestIamPermissions_async
     */
    testIamPermissions(request?: protos.google.iam.v1.ITestIamPermissionsRequest, options?: CallOptions): Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
        {} | undefined
    ]>;
    testIamPermissions(request: protos.google.iam.v1.ITestIamPermissionsRequest, options: CallOptions, callback: Callback<protos.google.iam.v1.ITestIamPermissionsResponse, protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined, {} | null | undefined>): void;
    testIamPermissions(request: protos.google.iam.v1.ITestIamPermissionsRequest, callback: Callback<protos.google.iam.v1.ITestIamPermissionsResponse, protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns a list of connections in the given project.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     *   Must be in the form: `projects/{project_id}/locations/{location_id}`
     * @param {number} request.pageSize
     *   Required. Page size.
     * @param {string} request.pageToken
     *   Page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.bigquery.connection.v1.Connection|Connection}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listConnectionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listConnections(request?: protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.bigquery.connection.v1.IConnection[],
        protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest | null,
        protos.google.cloud.bigquery.connection.v1.IListConnectionsResponse
    ]>;
    listConnections(request: protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest, protos.google.cloud.bigquery.connection.v1.IListConnectionsResponse | null | undefined, protos.google.cloud.bigquery.connection.v1.IConnection>): void;
    listConnections(request: protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest, callback: PaginationCallback<protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest, protos.google.cloud.bigquery.connection.v1.IListConnectionsResponse | null | undefined, protos.google.cloud.bigquery.connection.v1.IConnection>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     *   Must be in the form: `projects/{project_id}/locations/{location_id}`
     * @param {number} request.pageSize
     *   Required. Page size.
     * @param {string} request.pageToken
     *   Page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.bigquery.connection.v1.Connection|Connection} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listConnectionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listConnectionsStream(request?: protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listConnections`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     *   Must be in the form: `projects/{project_id}/locations/{location_id}`
     * @param {number} request.pageSize
     *   Required. Page size.
     * @param {string} request.pageToken
     *   Page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.bigquery.connection.v1.Connection|Connection}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/connection_service.list_connections.js</caption>
     * region_tag:bigqueryconnection_v1_generated_ConnectionService_ListConnections_async
     */
    listConnectionsAsync(request?: protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.bigquery.connection.v1.IConnection>;
    /**
     * Return a fully-qualified cluster resource name string.
     *
     * @param {string} project
     * @param {string} region
     * @param {string} cluster
     * @returns {string} Resource name string.
     */
    clusterPath(project: string, region: string, cluster: string): string;
    /**
     * Parse the project from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromClusterName(clusterName: string): string | number;
    /**
     * Parse the region from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the region.
     */
    matchRegionFromClusterName(clusterName: string): string | number;
    /**
     * Parse the cluster from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromClusterName(clusterName: string): string | number;
    /**
     * Return a fully-qualified connection resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} connection
     * @returns {string} Resource name string.
     */
    connectionPath(project: string, location: string, connection: string): string;
    /**
     * Parse the project from Connection resource.
     *
     * @param {string} connectionName
     *   A fully-qualified path representing Connection resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromConnectionName(connectionName: string): string | number;
    /**
     * Parse the location from Connection resource.
     *
     * @param {string} connectionName
     *   A fully-qualified path representing Connection resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromConnectionName(connectionName: string): string | number;
    /**
     * Parse the connection from Connection resource.
     *
     * @param {string} connectionName
     *   A fully-qualified path representing Connection resource.
     * @returns {string} A string representing the connection.
     */
    matchConnectionFromConnectionName(connectionName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified service resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} service
     * @returns {string} Resource name string.
     */
    servicePath(project: string, location: string, service: string): string;
    /**
     * Parse the project from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromServiceName(serviceName: string): string | number;
    /**
     * Parse the location from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromServiceName(serviceName: string): string | number;
    /**
     * Parse the service from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromServiceName(serviceName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
